{"version":3,"sources":["assets/img/empty-poster.png","serviceWorker.js","constants/staticContent.js","constants/constants.js","constants/defaultProps.js","utils/ajaxRequest.js","utils/getMovies.js","constants/icons.js","utils/generateIconClass.js","components/GenresList/GenresList.js","components/SingleSlide/SingleSlide.js","components/Slider/Slider.js","components/Preloader/Preloader.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","staticContent","raitingTitle","metaScoreTitle","trailerTitle","trailerSite","directorTitle","actorsTitle","credentials","codeResource","resourceCodeLink","mail","BASE_PATH","TMDbAPI","defaultProps","singleSlider","defaultOverview","defaultYear","defaultDirector","defaultActors","defaultImdbRating","defaultPoster","emptyPoster","ajaxRequest","url","fetch","method","responseText","json","responseParsed","getNowPlaying","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","movieItemsTMDb","requestTMDb","requestTMDbWithPage","wrap","_context","prev","next","concat","Promise","all","_ref2","_ref3","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","slicedNowPlayingPage2Results","slice","length","forEach","item","poster","poster_path","push","err","abrupt","stop","_x","apply","this","arguments","getTMDbInfo","_ref4","_callee3","promises","_context3","map","_ref5","_callee2","currTMDbItem","currTMDbId","movieInfo","trailers","trailerUrl","trailersLength","lastTrailer","_context2","id","sent","videos","site","key","objectSpread2","imdb_id","trailer_url","genres","_x3","_x2","getOMDbInfo","_ref6","_callee5","_defaultProps$singleS","_context5","_ref7","_callee4","currIMDbId","requestOMDb","emptyData","_context4","imdbRating","isNaN","Actors","director","Director","actors","metascore","Metascore","year","Year","_x5","_x4","sortByRating","_ref8","_callee6","_context6","sort","b","_x6","updateState","_ref9","_callee7","_context7","resolve","reject","JSON","stringify","_x7","initSlider","_ref10","_callee8","_context8","Swiper","effect","centeredSlides","slidesPerView","mousewheel","keyboard","grabCursor","longSwipesRatio","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","getMovies","_ref11","_callee9","nowPlayingMovies","TMDbInfoOfMovies","OMDbInfoOfMovies","sortedByRatingMovies","updatedMovies","_context9","_x8","icons","12","14","16","18","27","28","35","36","37","53","80","99","878","9648","10402","10749","10751","10752","10770","generateIconClass","GenresList","size","react_default","createElement","className","name","SingleSlide","_ref$movie","movie","title","overview","src","alt","href","target","rel","components_GenresList_GenresList","Slider","movies","components_SingleSlide_SingleSlide","Preloader","App","contentLoading","setupSlider","_this","setState","_this2","_this$state","Fragment","CSSTransition","in","timeout","classNames","unmountOnExit","components_Preloader_Preloader","components_Slider_Slider","Component","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c7e30cb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          /* eslint-disable no-console */\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA');\n          /* eslint-enable */\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              /* eslint-disable no-console */\n              console.log('New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              /* eslint-disable no-console */\n              console.log('Content is cached for offline use.');\n              /* eslint-enable */\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      /* eslint-disable no-console */\n      console.error('Error during service worker registration:', error);\n      /* eslint-enable */\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      /* eslint-disable no-console */\n      console.log('No internet connection found. App is running in offline mode.');\n      /* eslint-enable */\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const staticContent = {\n  raitingTitle: 'IMDb',\n  metaScoreTitle: 'Critics',\n  trailerTitle: 'Trailer',\n  trailerSite: 'YouTube',\n  directorTitle: 'Producer',\n  actorsTitle: 'Cast',\n  credentials: 'Made by Artur Voloshyn',\n  codeResource: 'GitHub',\n  resourceCodeLink: 'https://github.com/ArturW1998/Movies/',\n  mail: 'arthurvoloshyn@gmail.com'\n};\n\nexport default staticContent;\n","export const BASE_PATH = 'https://api.themoviedb.org/3/movie';\nexport const PLAYING_PATH = '/now_playing';\nexport const REGION_PARAM = 'region=';\nexport const REGION_QUERY = 'UA';\nexport const LANGUAGE_PARAM = 'language=';\nexport const LANGUAGE_QUERY = 'en-EN';\nexport const API_KEY = 'api_key=';\nexport const PAGE_PARAM = 'page=';\nexport const PAGE_QUERY = 2;\nexport const DATA_PARAM = 'append_to_response=';\nexport const DATA_QUERY = 'external_ids,videos';\n\nexport const YOUTUBE_BASE_PATH = 'https://www.youtube.com/watch';\nexport const YOUTUBE_WATCH_PARAM = 'v=';\n\nexport const OMDB_BASE_PATH = 'https://www.omdbapi.com/';\nexport const OMDB_I_PARAM = 'i=';\nexport const OMDB_API_KEY = 'apikey=';\n\nexport const TMDbAPI = '3b07521ea25bf66106a9525b3054c8e9';\nexport const OMDbAPI = '55018c43';\n\nexport const posterPath = 'https://image.tmdb.org/t/p/original'; // lower resolution:\n// https://image.tmdb.org/t/p/w370_and_h556_bestv2\n","import emptyPoster from '../assets/img/empty-poster.png';\n\nconst defaultProps = {\n  singleSlider: {\n    defaultOverview: 'The overview is empty.',\n    defaultYear: 2020,\n    defaultDirector: 'The producer is unknown.',\n    defaultActors: 'Actors are unknown.',\n    defaultImdbRating: '-',\n    defaultPoster: emptyPoster\n  }\n};\n\nexport default defaultProps;\n","export const ajaxRequest = url =>\n  fetch(url, { method: 'GET' })\n    .then(responseText => responseText.json())\n    .then(responseParsed => responseParsed)\n    .catch(error => error);\n","import Swiper from 'swiper';\n\nimport {\n  API_KEY,\n  BASE_PATH,\n  DATA_PARAM,\n  DATA_QUERY,\n  LANGUAGE_PARAM,\n  LANGUAGE_QUERY,\n  OMDB_API_KEY,\n  OMDB_BASE_PATH,\n  OMDB_I_PARAM,\n  OMDbAPI,\n  PAGE_PARAM,\n  PAGE_QUERY,\n  PLAYING_PATH,\n  posterPath,\n  REGION_PARAM,\n  REGION_QUERY,\n  TMDbAPI,\n  YOUTUBE_BASE_PATH,\n  YOUTUBE_WATCH_PARAM\n} from '../constants/constants';\nimport staticContent from '../constants/staticContent';\nimport defaultProps from '../constants/defaultProps';\n\nimport { ajaxRequest } from './ajaxRequest';\n\nconst getNowPlaying = async movieItemsTMDb => {\n  const requestTMDb = `${BASE_PATH}${PLAYING_PATH}?${REGION_PARAM}${REGION_QUERY}&${LANGUAGE_PARAM}${LANGUAGE_QUERY}&${API_KEY}${TMDbAPI}`;\n  const requestTMDbWithPage = `${requestTMDb}&${PAGE_PARAM}${PAGE_QUERY}`;\n\n  await Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDbWithPage}`)])\n    .then(([nowPlayingPage1, nowPlayingPage2]) => {\n      const { results: nowPlayingPage1Results } = nowPlayingPage1;\n      const { results: nowPlayingPage2Results } = nowPlayingPage2;\n\n      const slicedNowPlayingPage2Results = nowPlayingPage2Results.slice(0, nowPlayingPage2Results.length - 2); // to avoid TMDb API 40 requests limit\n\n      const nowPlayingResults = nowPlayingPage1Results.concat(slicedNowPlayingPage2Results);\n\n      nowPlayingResults.forEach(item => {\n        item.poster = item.poster_path ? `${posterPath}${item.poster_path}` : null;\n\n        movieItemsTMDb.push(item);\n      });\n    })\n    .catch(err => err);\n\n  return movieItemsTMDb;\n};\n\nconst getTMDbInfo = async movieItemsTMDb => {\n  const { trailerSite } = staticContent;\n\n  const promises = movieItemsTMDb.map(async currTMDbItem => {\n    const currTMDbId = currTMDbItem.id;\n    const requestTMDb = `${BASE_PATH}/${currTMDbId}?${API_KEY}${TMDbAPI}&${DATA_PARAM}${DATA_QUERY}&${LANGUAGE_PARAM}${LANGUAGE_QUERY}`;\n\n    const movieInfo = await ajaxRequest(requestTMDb);\n\n    const { results: trailers } = movieInfo.videos;\n    let trailerUrl = '';\n    const trailersLength = trailers.length;\n\n    if (trailersLength > 0) {\n      const lastTrailer = trailers[trailersLength - 1];\n\n      trailerUrl = lastTrailer.site === trailerSite ? `${YOUTUBE_BASE_PATH}?${YOUTUBE_WATCH_PARAM}${lastTrailer.key}` : trailerUrl;\n    }\n\n    return {\n      ...currTMDbItem,\n      imdb_id: movieInfo.imdb_id,\n      trailer_url: trailerUrl,\n      genres: movieInfo.genres\n    };\n  });\n\n  return movieItemsTMDb.length ? Promise.all(promises) : movieItemsTMDb;\n};\n\nconst getOMDbInfo = async movieItemsTMDb => {\n  const { defaultImdbRating, defaultActors } = defaultProps.singleSlider;\n\n  const promises = movieItemsTMDb.map(async currTMDbItem => {\n    const currIMDbId = currTMDbItem.imdb_id;\n    const requestOMDb = `${OMDB_BASE_PATH}?${OMDB_I_PARAM}${currIMDbId}&${OMDB_API_KEY}${OMDbAPI}`;\n    const emptyData = 'N/A';\n\n    const movieInfo = await ajaxRequest(requestOMDb);\n\n    movieInfo.imdbRating = isNaN(movieInfo.imdbRating) ? defaultImdbRating : movieInfo.imdbRating; // may be \"N/A\"\n\n    movieInfo.Actors = movieInfo.Actors === emptyData ? defaultActors : movieInfo.Actors;\n\n    return {\n      ...currTMDbItem,\n      imdbRating: movieInfo.imdbRating,\n      director: movieInfo.Director,\n      actors: movieInfo.Actors,\n      metascore: movieInfo.Metascore, // may be \"N/A\"\n      year: movieInfo.Year\n    };\n  });\n\n  return movieItemsTMDb.length ? Promise.all(promises) : movieItemsTMDb;\n};\n\nconst sortByRating = async movieItemsTMDb => {\n  movieItemsTMDb.sort((a, b) => {\n    if (a.imdbRating > b.imdbRating) {\n      return -1;\n    } else if (a.imdbRating < b.imdbRating) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  return movieItemsTMDb;\n};\n\nconst updateState = async movieItemsTMDb =>\n  new Promise((resolve, reject) => {\n    JSON.stringify(movieItemsTMDb);\n\n    resolve(movieItemsTMDb);\n  });\n\nexport const initSlider = async () =>\n  new Promise((resolve, reject) => {\n    new Swiper('.swiper-container', {\n      effect: 'coverflow',\n      centeredSlides: true,\n      slidesPerView: 'auto',\n      mousewheel: true,\n      keyboard: true,\n      grabCursor: true,\n      longSwipesRatio: 1,\n      coverflowEffect: {\n        rotate: 20,\n        stretch: 0,\n        depth: 100,\n        modifier: 1,\n        slideShadows: false\n      },\n      on: {\n        init: () => {\n          const contentLoading = false;\n\n          resolve(contentLoading);\n        }\n      }\n    });\n  });\n\nexport const getMovies = async movieItemsTMDb => {\n  const nowPlayingMovies = await getNowPlaying(movieItemsTMDb);\n  const TMDbInfoOfMovies = await getTMDbInfo(nowPlayingMovies);\n  const OMDbInfoOfMovies = await getOMDbInfo(TMDbInfoOfMovies);\n  const sortedByRatingMovies = await sortByRating(OMDbInfoOfMovies);\n  const updatedMovies = await updateState(sortedByRatingMovies);\n\n  return updatedMovies;\n};\n","const icons = {\n  12: 'adventures',\n  14: 'fantasy',\n  16: 'animation',\n  18: 'drama',\n  27: 'horror',\n  28: 'action',\n  35: 'comedy',\n  36: 'history',\n  37: 'western-film',\n  53: 'thriller',\n  80: 'crime',\n  99: 'documentary',\n  878: 'science-fiction',\n  9648: 'mystery',\n  10402: 'music',\n  10749: 'romance',\n  10751: 'family',\n  10752: 'war',\n  10770: 'show'\n};\n\nexport default icons;\n","import icons from '../constants/icons';\n\nexport const generateIconClass = id => {\n  const icon = icons[id] || 'default';\n\n  const classes = `item__genre-icon item__genre-icon--${icon}`;\n\n  return classes;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { generateIconClass } from '../../utils/generateIconClass';\n\nconst GenresList = ({ genres, size }) => (\n  <div className={`item__sidebar item__genre-box item__genre-box--${size}`}>\n    {genres.map(({ id, name }) => (\n      <div key={id} className=\"item__genre-element\">\n        <div className={generateIconClass(id)} />\n        <div className=\"item__genre-name\">{name}</div>\n      </div>\n    ))}\n  </div>\n);\n\nGenresList.propTypes = {\n  genres: PropTypes.array,\n  size: PropTypes.string\n};\n\nGenresList.defaultProps = {\n  genres: [],\n  size: 'sm'\n};\n\nexport default GenresList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport defaultProps from '../../constants/defaultProps';\nimport staticContent from '../../constants/staticContent';\n\nimport GenresList from '../GenresList/GenresList';\n\nimport './SingleSlide.scss';\n\nconst { defaultOverview, defaultYear, defaultDirector, defaultActors, defaultPoster, defaultImdbRating } = defaultProps.singleSlider;\nconst { raitingTitle, metaScoreTitle, trailerTitle, trailerSite, directorTitle, actorsTitle } = staticContent;\n\nconst SingleSlide = ({ movie: { genres, poster, title, year, imdbRating, metascore, trailer_url, director, actors, overview } }) => (\n  <div className=\"swiper-slide item\">\n    <div className=\"item__description item__title\">\n      <span>{`${title} (${year || defaultYear})`}</span>\n    </div>\n\n    <div className=\"item__img\">\n      <img src={poster} alt=\"Poster\" />\n\n      <div className=\"item__shadow item__shadow--left\" />\n\n      <div className=\"item__shadow item__shadow--right\" />\n\n      <div className=\"item__description item__marks\">\n        <div className=\" item__sidebar item__sidebar--imdb\">\n          <span className=\"item__sidebar-title\">{raitingTitle}</span>\n\n          <span className=\"item__sidebar-number\">{imdbRating}</span>\n        </div>\n\n        {!isNaN(metascore) && (\n          <div className=\"item__sidebar item__sidebar--metascore\">\n            <span className=\"item__sidebar-title item__sidebar-title--sm\">{metaScoreTitle}</span>\n\n            <span className=\"item__sidebar-number\">{`${metascore}%`}</span>\n          </div>\n        )}\n\n        {trailer_url.length > 0 && (\n          <div className=\"item__sidebar item__sidebar--trailer\">\n            <span className=\"item__sidebar-title item__sidebar-title--sm\">{trailerTitle}</span>\n\n            <span className=\"item__sidebar-icon item__sidebar-icon--youtube\" />\n\n            <a className=\"item__sidebar-link\" href={trailer_url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {trailerSite}\n            </a>\n          </div>\n        )}\n\n        {genres.length > 0 && (\n          <div className=\"item__genre\">\n            <GenresList genres={genres} size=\"sm\" />\n\n            <GenresList genres={genres} size=\"lg\" />\n          </div>\n        )}\n      </div>\n    </div>\n\n    <div className=\"item__description item__bottom\">\n      <div className=\"item__cast\">\n        <span className=\"item__director\">\n          {directorTitle}: <span>{director || defaultDirector}</span>\n        </span>\n\n        <span className=\"item__actors\">\n          {actorsTitle}: <span>{actors || defaultActors}</span>\n        </span>\n      </div>\n\n      <div className=\"item__overview\">\n        <span>{overview || defaultOverview}</span>\n      </div>\n    </div>\n  </div>\n);\n\nSingleSlide.propTypes = {\n  movie: PropTypes.shape({\n    genres: PropTypes.array,\n    poster: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    imdbRating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    metascore: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    trailer_url: PropTypes.string,\n    director: PropTypes.string,\n    actors: PropTypes.string,\n    overview: PropTypes.string\n  })\n};\n\nSingleSlide.defaultProps = {\n  movie: {\n    genres: [],\n    poster: defaultPoster,\n    year: defaultYear,\n    imdbRating: defaultImdbRating,\n    metascore: 0,\n    trailer_url: '',\n    director: defaultDirector,\n    actors: defaultActors,\n    overview: defaultOverview\n  }\n};\n\nexport default SingleSlide;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'swiper/dist/css/swiper.css';\n\nimport './Slider.scss';\n\nimport SingleSlide from '../SingleSlide/SingleSlide';\n\nconst Slider = ({ movies }) => (\n  <div className=\"swiper-container\">\n    <div className=\"swiper-wrapper\">\n      {movies.map(item => (\n        <SingleSlide key={item.id} movie={item} />\n      ))}\n    </div>\n  </div>\n);\n\nSlider.propTypes = {\n  movies: PropTypes.array\n};\n\nSlider.defaultProps = {\n  movies: []\n};\n\nexport default Slider;\n","import React from 'react';\n\nimport './Preloader.scss';\n\nconst Preloader = () => (\n  <div className=\"loader\">\n    <div className=\"loader__spinner\">\n      <div className=\"loader__spinner-square\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport staticContent from './constants/staticContent';\n\nimport { getMovies, initSlider } from './utils/getMovies';\n\nimport Slider from './components/Slider/Slider';\nimport Preloader from './components/Preloader/Preloader';\n\nimport './styles/App.scss';\n\nclass App extends Component {\n  state = {\n    movies: [],\n    contentLoading: true\n  };\n\n  componentDidMount() {\n    const { movies } = this.state;\n\n    getMovies(movies)\n      .then(movieItemsTMDb => this.setState({ movies: movieItemsTMDb }))\n      .then(() => this.setupSlider())\n      .catch(err => err);\n  }\n\n  setupSlider = () => {\n    initSlider()\n      .then(contentLoading => this.setState({ contentLoading }))\n      .catch(err => err);\n  };\n\n  render() {\n    const { contentLoading, movies } = this.state;\n    const { credentials, codeResource, resourceCodeLink, mail } = staticContent;\n\n    return (\n      <>\n        <CSSTransition in={contentLoading} timeout={500} classNames=\"animation\" unmountOnExit>\n          <Preloader />\n        </CSSTransition>\n\n        <CSSTransition in={!contentLoading} timeout={1000} classNames=\"animation\">\n          <div className=\"content\">\n            <div className=\"credentials\">\n              <p>{credentials}</p>\n              <a href={resourceCodeLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                {codeResource}\n              </a>\n              &nbsp;\n              <a href={`mailto:${mail}`}>{mail}</a>\n            </div>\n            <Slider movies={movies} />\n          </div>\n        </CSSTransition>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nimport './styles/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}